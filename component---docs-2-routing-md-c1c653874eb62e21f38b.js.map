{"version":3,"sources":["webpack:///../docs/2-routing.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,mMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,2DAA0C,mBAAGC,WAAW,KAAQ,CAC5D,KAAQ,+CAD8B,oBAA1C,kCAGA,iBAAQ,CACN,GAAM,wBADR,wBAGA,kEAAiD,0BAAYA,WAAW,KAAvB,cAAjD,2BACA,6GAA4F,0BAAYA,WAAW,KAAvB,QAA5F,MAAmJ,0BAAYA,WAAW,KAAvB,cACnJ,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oOAYL,sBACE,kBAAIA,WAAW,MAAf,iCAAsD,0BAAYA,WAAW,MAAvB,wCAExD,iBAAQ,CACN,GAAM,gCADR,iCAGA,kEAAiD,mBAAGA,WAAW,KAAQ,CACnE,KAAQ,iEADqC,uBAAjD,KAGA,uIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2TAgBL,4FAA2E,kBAAIA,WAAW,KAAf,OAA3E,2CACA,6GAA4F,kBAAIA,WAAW,MAA3G,wBACkB,mBAAGA,WAAW,KAAQ,CACpC,KAAQ,iEADM,uBADlB,4CAIA,iBAAQ,CACN,GAAM,wBADR,0BAGA,4IACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,mBAAyF,0BAAYA,WAAW,MAAvB,KAAzF,sBACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,YAApB,4IACA,kBAAIA,WAAW,MAAf,SAA8B,0BAAYA,WAAW,MAAvB,UAA9B,4CAA8H,0BAAYA,WAAW,MAAvB,OAA9H,oEAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wbAoBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,0FAAyE,0BAAYA,WAAW,KAAvB,UAAzE,oDACW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,oJADD,sBAGX,yHAAwG,0BAAYA,WAAW,KAAvB,cAAxG,MAAqK,0BAAYA,WAAW,KAAvB,iBAArK,8BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,iRAmBL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,4QAqBL,iBAAQ,CACN,GAAM,oBADR,oBAGA,4GACA,iJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,4V,0LA2BTJ,EAAWK,gBAAiB","file":"component---docs-2-routing-md-c1c653874eb62e21f38b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ephys/Documents/dev/reworkjs/reworkjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"routing\"\n    }}>{`Routing`}</h1>\n    <p>{`Routing in rework.js is handled by `}<a parentName=\"p\" {...{\n        \"href\": \"https://reacttraining.com/react-router/web\"\n      }}>{`React Router DOM`}</a>{`, with sprinkles added on top.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-new-route\"\n    }}>{`Creating a new Route`}</h2>\n    <p>{`The default router treats all files named `}<inlineCode parentName=\"p\">{`*.route.js`}</inlineCode>{`* as route definitions.`}</p>\n    <p>{`The route file should default-export an object containing the metadata of the route: `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`component`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// src/pages/home.route.ts\n\nexport default {\n  path: '/',\n\n  // the react component to render on the homepage, works like any other component.\n  // see bellow for lazy-loading\n  component: MyLazyLoadedComponent,\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The actual default pattern is `}<inlineCode parentName=\"li\">{`src/**/*.route.{js,jsx,mjs,ts,tsx}`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"code-splitting--lazy-loading\"\n    }}>{`Code Splitting & Lazy Loading`}</h2>\n    <p>{`Code splitting in rework.js is handled by `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.smooth-code.com/open-source/loadable-components/\"\n      }}>{`Loadable Components`}</a>{`.`}</p>\n    <p>{`If we take the example above and expand it to lazy-load the homepage, we would end up with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// src/pages/home/home.route.ts\n\nimport loadable from '@loadable/component';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default {\n  path: '/',\n\n  // lazy-load the homepage\n  component: loadable(() => import('./home.view'), {\n    fallback: CircularProgress,\n  }),\n}\n`}</code></pre>\n    <p>{`N.B.: You can lazy-load components anywhere using loadable, this is `}<em parentName=\"p\">{`not`}</em>{` strictly limited to route definitions.`}</p>\n    <p>{`That library is fully integrated with the framework, including server-side rendering.`}<br parentName=\"p\"></br>{`\n`}{`Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.smooth-code.com/open-source/loadable-components/\"\n      }}>{`their documentation`}</a>{` for more information on code splitting.`}</p>\n    <h2 {...{\n      \"id\": \"catch-all-routes-404\"\n    }}>{`Catch-all routes (404)`}</h2>\n    <p>{`Creating a catch-all route works pretty much the same. It is your standard route definition with a few differences:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{` must be set to `}<inlineCode parentName=\"li\">{`*`}</inlineCode>{` to match all urls`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`priority`}</inlineCode>{` must be set to a low number so the route is matched last (if a catch-all route is matched first, all pages will display the catch-all).`}</li>\n      <li parentName=\"ul\">{`(SSR) `}<inlineCode parentName=\"li\">{`status`}</inlineCode>{` can be set to any HTTP status code (eg. `}<inlineCode parentName=\"li\">{`404`}</inlineCode>{`) if you wish to change the status code the server will return.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// src/pages/404/404.route.ts\n\nimport loadable from '@loadable/component';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default {\n  // match all urls\n  path: '*',\n  // make this route definition match last\n  priority: 0,\n  // if this route matches, change ssr http status to 404\n  status: 404,\n\n  component: loadable(() => import('./404.view'), {\n    fallback: CircularProgress,\n  }),\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"http-status-codes\"\n    }}>{`HTTP status codes`}</h2>\n    <p>{`Setting the HTTP status for SSR can be done either by setting the `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` property on your route definition\nor using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/server-rendering.md#404-401-or-any-other-status\"\n      }}>{`React-Router APIs`}</a></p>\n    <p>{`The react-router way is a bit cumbersome so rework.js exposes two utilities you can use instead: `}<inlineCode parentName=\"p\">{`HttpStatus`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`useHttpStatus`}</inlineCode>{`. They are used like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`// HttpStatus component\n\n// src/pages/404/404.view.tsx\nimport * as React from 'react';\nimport { HttpStatus } from '@reworkjs/core/router';\n\nfunction My404Page() {\n  return (\n    <>\n      <HttpStatus code={404} />\n      Resource not found!\n    </>\n  );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`// useHttpStatus hook\n\n// src/pages/404/404.view.tsx\nimport * as React from 'react';\nimport { useHttpStatus } from '@reworkjs/core/router';\n\nfunction My404Page() {\n\n  useHttpStatus(404);\n\n  return (\n    <>\n      Resource not found!\n    </>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"advanced-routing\"\n    }}>{`Advanced Routing`}</h2>\n    <p>{`While this route-loading system, it also limits what can be done with React-Router.`}</p>\n    <p>{`If you wish to bypass it and come back to React-Router, you can create a single route file that will act as your router:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`// src/pages/router.route.tsx\n\nimport * as React from 'react';\nimport { Switch } from 'react-router-dom';\n\nexport default {\n  // match all urls\n  path: '*',\n  component: MyRouter,\n};\n\nfunction MyRouter() {\n  return (\n    <Switch>\n      {/* check out react-router for documentation on their routing! */}\n    </Switch>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}