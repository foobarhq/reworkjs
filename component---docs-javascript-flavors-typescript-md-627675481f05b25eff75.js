(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"1n83":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return p}));var s=n("Fcif"),i=n("+I+c"),c=(n("mXGw"),n("/FXl")),o=n("TjRS"),l=(n("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/javascript-flavors/typescript.md"}});var r={_frontmatter:l},a=o.a;function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(c.b)(a,Object(s.a)({},r,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"typescript"},"TypeScript"),Object(c.b)("h2",{id:"install"},"Install"),Object(c.b)("p",null,"rework.js treats TypeScript files like other files. While tsc won't be used, you can use the built-in babel integration\nto compile typescript files by adding the ",Object(c.b)("inlineCode",{parentName:"p"},"@babel/preset-typescript")," package to ",Object(c.b)("inlineCode",{parentName:"p"},"babel.config.js"),"."),Object(c.b)("pre",null,Object(c.b)("code",{className:"language-javascript",parentName:"pre"},"// babel.config.js\n\nmodule.exports = {\n  presets: [\n    ['@reworkjs/core/babel-preset'],\n    ['@babel/preset-typescript', {\n      isTSX: true,\n      allExtensions: true,\n    }],\n  ],\n};\n")),Object(c.b)("h2",{id:"typechecking"},"Typechecking"),Object(c.b)("p",null,"Babel will not check whether the typing is correct when building, but you can use tsc to typecheck\nwith this command: ",Object(c.b)("inlineCode",{parentName:"p"},"tsc --noEmit --project tsconfig.json --skipLibCheck"),".\nYou will need to install TypeScript (",Object(c.b)("inlineCode",{parentName:"p"},"npm i -D typescript"),")"),Object(c.b)("p",null,"You will also need to configure tsc through tsconfig:"),Object(c.b)("pre",null,Object(c.b)("code",{className:"language-json5",parentName:"pre"},'// tsconfig.json\n\n{\n  "compilerOptions": {\n    "module": "commonjs",\n    "target": "es6",\n    "jsx": "react",\n    "strict": true,\n    "moduleResolution": "node",\n    "sourceMap": true,\n    "rootDir": "src",\n    "noEmit": true,\n    "baseUrl": ".",\n    "paths": {\n      "*": [\n        "node_modules/*",\n        "types/*"\n      ]\n    }\n  },\n  "include": [\n    "src/**/*"\n  ]\n}\n')),Object(c.b)("p",null,"rework.js uses a number of libraries with which you will interact. Please install their typing to avoid any typing error:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"npm i -D @types/loadable__component")),Object(c.b)("h3",{id:"css-typechecking"},"CSS TypeChecking"),Object(c.b)("p",null,"Because we import css files as if it were JavaScript, we need to tell TypeScript how to interpret it.\nSimply adding the following file in your project will do it:"),Object(c.b)("pre",null,Object(c.b)("code",{className:"language-typescript",parentName:"pre"},"// style.d.ts\n\n// css & css modules\ndeclare module '*.css' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n\n// scss & scss modules\ndeclare module '*.scss' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n")),Object(c.b)("p",null,"Alternatively tools exist to generate these typings for you, such as ",Object(c.b)("a",{href:"https://github.com/skovy/typed-scss-modules",parentName:"p"},"typed-scss-modules")),Object(c.b)("h2",{id:"linting"},"Linting"),Object(c.b)("p",null,"You will need to adapt your eslint config to support typescript.\nDon't forget to update ",Object(c.b)("inlineCode",{parentName:"p"},".lintstagedrc")," to lint typescript files during commit."))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/javascript-flavors/typescript.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-javascript-flavors-typescript-md-627675481f05b25eff75.js.map