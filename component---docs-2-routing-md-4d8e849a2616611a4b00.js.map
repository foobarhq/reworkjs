{"version":3,"sources":["webpack:///../docs/2-routing.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"uPAMaA,G,UAAe,S,mMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,2DACE,gBAAO,CACL,KAAQ,6CACR,WAAc,KAFhB,oBADF,kCAMA,iBAAQ,CACN,GAAM,wBADR,wBAGA,kEACE,yBAAgB,CACd,WAAc,KADhB,cADF,2BAKA,6GACE,yBAAgB,CACd,WAAc,KADhB,QADF,MAKE,yBAAgB,CACd,WAAc,KADhB,cAGF,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,OAFb,oOAaL,sBAEE,iBAAQ,CACN,WAAc,MADhB,iCAGE,yBAAgB,CACd,WAAc,MADhB,wCAKJ,iBAAQ,CACN,GAAM,gCADR,iCAGA,kEACE,gBAAO,CACL,KAAQ,+DACR,WAAc,KAFhB,uBADF,KAMA,uIACA,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,OAFb,gWAkBL,4FACE,iBAAQ,CACN,WAAc,KADhB,OADF,2CAKA,+HAEE,gBAAO,CACL,KAAQ,+DACR,WAAc,KAFhB,uBAFF,4CAOA,iBAAQ,CACN,GAAM,wBADR,0BAGA,4IACA,sBAEE,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,QAFH,mBAME,yBAAgB,CACd,WAAc,MADhB,KANF,sBAYA,iBAAQ,CACN,WAAc,MACb,yBAAgB,CACf,WAAc,MADf,YAFH,4IAQA,iBAAQ,CACN,WAAc,MADhB,SAGE,yBAAgB,CACd,WAAc,MADhB,UAHF,4CAOE,yBAAgB,CACd,WAAc,MADhB,OAPF,oEAaF,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,OAFb,6dAsBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,0FACE,yBAAgB,CACd,WAAc,KADhB,UADF,oDAME,gBAAO,CACL,KAAQ,kJACR,WAAc,KAFhB,sBAIF,yHACE,yBAAgB,CACd,WAAc,KADhB,cADF,MAKE,yBAAgB,CACd,WAAc,KADhB,iBALF,8BASA,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,MACd,KAAO,EACP,WAAc,OAJb,iRAoBL,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,MACd,KAAO,EACP,WAAc,OAJb,4QAsBL,iBAAQ,CACN,GAAM,oBADR,oBAGA,4GACA,iJACA,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,MACd,KAAO,EACP,WAAc,OAJb,iW,iMA4BTH,EAAWI,gBAAiB","file":"component---docs-2-routing-md-4d8e849a2616611a4b00.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/ephys/Development/reworkjs/core/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"routing\"\n    }}>{`Routing`}</h1>\n    <p>{`Routing in rework.js is handled by `}\n      <a {...{\n        \"href\": \"https://reacttraining.com/react-router/web\",\n        \"parentName\": \"p\"\n      }}>{`React Router DOM`}</a>\n      {`, with sprinkles added on top.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-new-route\"\n    }}>{`Creating a new Route`}</h2>\n    <p>{`The default router treats all files named `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`*.route.js`}</inlineCode>\n      {`* as route definitions.`}</p>\n    <p>{`The route file should default-export an object containing the metadata of the route: `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`path`}</inlineCode>\n      {` & `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`component`}</inlineCode></p>\n    <pre><code {...{\n        \"className\": \"language-typescript\",\n        \"parentName\": \"pre\"\n      }}>{`// src/pages/home.route.ts\n\nexport default {\n  path: '/',\n\n  // the react component to render on the homepage, works like any other component.\n  // see bellow for lazy-loading\n  component: MyLazyLoadedComponent,\n}\n`}</code></pre>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`The actual default pattern is `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`src/**/*.route.{js,jsx,mjs,ts,tsx}`}</inlineCode></li>\n\n    </ul>\n    <h2 {...{\n      \"id\": \"code-splitting--lazy-loading\"\n    }}>{`Code Splitting & Lazy Loading`}</h2>\n    <p>{`Code splitting in rework.js is handled by `}\n      <a {...{\n        \"href\": \"https://www.smooth-code.com/open-source/loadable-components/\",\n        \"parentName\": \"p\"\n      }}>{`Loadable Components`}</a>\n      {`.`}</p>\n    <p>{`If we take the example above and expand it to lazy-load the homepage, we would end up with the following code:`}</p>\n    <pre><code {...{\n        \"className\": \"language-typescript\",\n        \"parentName\": \"pre\"\n      }}>{`// src/pages/home/home.route.ts\n\nimport * as React from 'react';\nimport loadable from '@loadable/component';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default {\n  path: '/',\n\n  // lazy-load the homepage\n  component: loadable(() => import('./home.view'), {\n    fallback: <CircularProgress />,\n  }),\n}\n`}</code></pre>\n    <p>{`N.B.: You can lazy-load components anywhere using loadable, this is `}\n      <em {...{\n        \"parentName\": \"p\"\n      }}>{`not`}</em>\n      {` strictly limited to route definitions.`}</p>\n    <p>{`That library is fully integrated with the framework, including server-side rendering.\nPlease refer to `}\n      <a {...{\n        \"href\": \"https://www.smooth-code.com/open-source/loadable-components/\",\n        \"parentName\": \"p\"\n      }}>{`their documentation`}</a>\n      {` for more information on code splitting.`}</p>\n    <h2 {...{\n      \"id\": \"catch-all-routes-404\"\n    }}>{`Catch-all routes (404)`}</h2>\n    <p>{`Creating a catch-all route works pretty much the same. It is your standard route definition with a few differences:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`path`}</inlineCode>\n        {` must be set to `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`*`}</inlineCode>\n        {` to match all urls`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`priority`}</inlineCode>\n        {` must be set to a low number so the route is matched last (if a catch-all route is matched first, all pages will display the catch-all).`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`(SSR) `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`status`}</inlineCode>\n        {` can be set to any HTTP status code (eg. `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`404`}</inlineCode>\n        {`) if you wish to change the status code the server will return.`}</li>\n\n    </ul>\n    <pre><code {...{\n        \"className\": \"language-typescript\",\n        \"parentName\": \"pre\"\n      }}>{`// src/pages/404/404.route.ts\n\nimport * as React from 'react';\nimport loadable from '@loadable/component';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default {\n  // match all urls\n  path: '*',\n  // make this route definition match last\n  priority: 0,\n  // if this route matches, change ssr http status to 404\n  status: 404,\n\n  component: loadable(() => import('./404.view'), {\n    fallback: <CircularProgress />,\n  }),\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"http-status-codes\"\n    }}>{`HTTP status codes`}</h2>\n    <p>{`Setting the HTTP status for SSR can be done either by setting the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`status`}</inlineCode>\n      {` property on your route definition\nor using the `}\n      <a {...{\n        \"href\": \"https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/server-rendering.md#404-401-or-any-other-status\",\n        \"parentName\": \"p\"\n      }}>{`React-Router APIs`}</a></p>\n    <p>{`The react-router way is a bit cumbersome so rework.js exposes two utilities you can use instead: `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`HttpStatus`}</inlineCode>\n      {` & `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`useHttpStatus`}</inlineCode>\n      {`. They are used like this:`}</p>\n    <pre><code {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true,\n        \"parentName\": \"pre\"\n      }}>{`// HttpStatus component\n\n// src/pages/404/404.view.tsx\nimport * as React from 'react';\nimport { HttpStatus } from '@reworkjs/core/router';\n\nfunction My404Page() {\n  return (\n    <>\n      <HttpStatus code={404} />\n      Resource not found!\n    </>\n  );\n}\n`}</code></pre>\n    <pre><code {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true,\n        \"parentName\": \"pre\"\n      }}>{`// useHttpStatus hook\n\n// src/pages/404/404.view.tsx\nimport * as React from 'react';\nimport { useHttpStatus } from '@reworkjs/core/router';\n\nfunction My404Page() {\n\n  useHttpStatus(404);\n\n  return (\n    <>\n      Resource not found!\n    </>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"advanced-routing\"\n    }}>{`Advanced Routing`}</h2>\n    <p>{`While this route-loading system, it also limits what can be done with React-Router.`}</p>\n    <p>{`If you wish to bypass it and come back to React-Router, you can create a single route file that will act as your router:`}</p>\n    <pre><code {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true,\n        \"parentName\": \"pre\"\n      }}>{`// src/pages/router.route.tsx\n\nimport * as React from 'react';\nimport { Switch } from 'react-router-dom';\n\nexport default {\n  // match all urls\n  path: '*',\n  component: MyRouter,\n};\n\nfunction MyRouter() {\n  return (\n    <Switch>\n      {/* check out react-router for documentation on their routing! */}\n    </Switch>\n  );\n}\n`}</code></pre>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}