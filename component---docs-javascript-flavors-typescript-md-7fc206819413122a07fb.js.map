{"version":3,"sources":["webpack:///../docs/javascript-flavors/typescript.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,WADR,WAGA,2LACwC,0BAAYC,WAAW,KAAvB,4BADxC,eAC4H,0BAAYA,WAAW,KAAvB,mBAD5H,KAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0MAcL,iBAAQ,CACN,GAAM,gBADR,gBAGA,+IACiB,0BAAYA,WAAW,KAAvB,uDADjB,IACqH,kBAAIA,WAAW,MADpI,6CAEuC,0BAAYA,WAAW,KAAvB,uBAFvC,KAGA,8EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,mZA2BL,kJACA,qBAAG,0BAAYA,WAAW,KAAvB,wCACH,iBAAQ,CACN,GAAM,oBADR,oBAGA,4LAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mR,8MAoBTJ,EAAWK,gBAAiB","file":"component---docs-javascript-flavors-typescript-md-7fc206819413122a07fb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/ephys/Development/reworkjs/core/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"typescript\"\n    }}>{`TypeScript`}</h1>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <p>{`rework.js treats TypeScript files like other files. While tsc won't be used, you can use the built-in babel integration\nto compile typescript files by adding the `}<inlineCode parentName=\"p\">{`@babel/preset-typescript`}</inlineCode>{` package to `}<inlineCode parentName=\"p\">{`babel.config.js`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// babel.config.js\n\nmodule.exports = {\n  presets: [\n    ['@reworkjs/core/babel-preset'],\n    ['@babel/preset-typescript', {\n      isTSX: true,\n      allExtensions: true,\n    }],\n  ],\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"typechecking\"\n    }}>{`Typechecking`}</h2>\n    <p>{`Babel will not check whether the typing is correct when building, but you can use tsc to typecheck\nwith this command: `}<inlineCode parentName=\"p\">{`tsc --noEmit --project tsconfig.json --skipLibCheck`}</inlineCode>{`.`}<br parentName=\"p\"></br>{`\n`}{`You will need to install TypeScript (`}<inlineCode parentName=\"p\">{`npm i -D typescript`}</inlineCode>{`)`}</p>\n    <p>{`You will also need to configure tsc through tsconfig:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json5\"\n      }}>{`// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"es6\",\n    \"jsx\": \"react\",\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"rootDir\": \"src\",\n    \"noEmit\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"*\": [\n        \"node_modules/*\",\n        \"types/*\"\n      ]\n    }\n  },\n  \"include\": [\n    \"src/**/*\"\n  ]\n}\n`}</code></pre>\n    <p>{`rework.js uses a number of libraries with which you will interact. Please install their typing to avoid any typing error:`}</p>\n    <p><inlineCode parentName=\"p\">{`npm i -D @types/loadable__component`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"css-typechecking\"\n    }}>{`CSS TypeChecking`}</h3>\n    <p>{`Because we import css files as if it were JavaScript, we need to tell TypeScript how to interpret it.\nSimply adding the following file in your project will do it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// style.d.ts \n\n// css & css modules\ndeclare module '*.css' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n\n// scss & scss modules\ndeclare module '*.scss' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}