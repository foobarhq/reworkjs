{"version":3,"sources":["webpack:///../STRUCTURE.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,8LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8BADR,8BAGA,yLACA,wHACA,iBAAQ,CACN,GAAM,iCADR,iCAGA,sBACE,kBAAIC,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,0CACA,kBAAIA,WAAW,MAAf,0BAEF,iBAAQ,CACN,GAAM,qBADR,qBAGA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,OAApB,iBAA8E,kBAAIA,WAAW,MACzF,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,aAApB,iFACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,aAApB,yEAA4I,kBAAIA,WAAW,MACvJ,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,oCACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,6BACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,+BAGR,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,MAApB,0DACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,OAApB,qC,qLAMNJ,EAAWK,gBAAiB","file":"component---structure-md-6ffea5ffeb5838d27ac0.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ephys/Documents/dev/reworkjs/reworkjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"reworkjs-project-structure\"\n    }}>{`ReworkJS Project Structure`}</h1>\n    <p>{`This framework needs to work on a lot of different platforms, requiring us to write sometimes multiple versions of the same code in order to make that possible.`}</p>\n    <p>{`In order to do this sanely, this project follow a specific structure based on the type of code.`}</p>\n    <h2 {...{\n      \"id\": \"platforms-the-code-can-run-on\"\n    }}>{`Platforms the code can run on`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Bundled with webpack then run in a browser.`}</li>\n      <li parentName=\"ul\">{`Bundled with webpack then run in Node.`}</li>\n      <li parentName=\"ul\">{`Run in node directly.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"project-structure\"\n    }}>{`Project Structure`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`src`}</strong>{`: Source files`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`internals`}</strong>{`: Anything cli related (is never included in any bundle, always runs on Node)`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`framework`}</strong>{`: Anything included in either the Server or the Client webpack bundle.`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\">{`client`}</strong>{`: What only runs in the browser.`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`server`}</strong>{`: What only runs in node.`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`common`}</strong>{`: What can run in both.`}</li>\n            </ul></li>\n        </ul></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`es`}</strong>{`: Built files to be included in either Webpack Bundles`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`lib`}</strong>{`: Built files to be run on Node`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}