{"version":3,"sources":["webpack:///../docs/advanced-topics/plugins.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,6BADR,6BAGA,iBAAQ,CACN,GAAM,eADR,eAGA,0FACA,sHAAqG,mBAAGC,WAAW,KAAQ,CACvH,KAAQ,2BADyF,sBAArG,KAGA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,0FACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,8EAEF,qBAAG,kBAAIA,WAAW,KAAf,aACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uGASL,+EACA,qEACA,sBACE,kBAAIA,WAAW,MAAf,mCACA,kBAAIA,WAAW,MAAf,kDAEF,2HACA,qBAAG,kBAAIA,WAAW,KAAf,WAAH,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wYAsBL,qGACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,0FACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uEAApB,wGAGF,iBAAQ,CACN,GAAM,qBADR,qBAGA,qBAAG,sBAAQA,WAAW,KAAnB,QAAH,qDACA,8FAA6E,mBAAGA,WAAW,KAAQ,CAC/F,KAAQ,kBADiE,gBAA7E,0BAGA,iBAAQ,CACN,GAAM,8BADR,gCAGA,qBAAG,sBAAQA,WAAW,KAAnB,QAAH,qHACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,mCAAnB,iLAEA,iBAAGA,WAAW,MAAd,6BAAiD,kBAAIA,WAAW,KAAf,OAAjD,yGAEA,iBAAGA,WAAW,MAAd,uDACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,wBADI,gaAgBrB,iBAAGA,WAAW,MAAK,kBAAIA,WAAW,KAAf,QAAnB,gEAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,uBAAnB,uGAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,yDAAnB,yHAIJ,iBAAQ,CACN,GAAM,iBADR,iBAGA,8KAEA,4DACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,gHAA+F,0BAAYA,WAAW,KAAvB,WAA/F,oBACG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,6BADT,sBADH,iEAIA,qBAAG,kBAAIA,WAAW,KAAf,aACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wGAUL,+EAA8D,0BAAYA,WAAW,KAAvB,6BAA9D,uBACA,iBAAQ,CACN,GAAM,gCADR,gCAGA,uHAAsG,0BAAYA,WAAW,KAAvB,aAAtG,oBACA,wEAAuD,0BAAYA,WAAW,KAAvB,iCAAvD,KACA,+EACA,iBAAQ,CACN,GAAM,gCADR,gCAGA,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yfAwBL,yCACA,sBACE,kBAAIA,WAAW,MAAf,kHACA,kBAAIA,WAAW,MAAf,2DAEF,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,KACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,eAAnB,kFACA,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBAApB,sEACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uBAApB,sDAA2I,0BAAYA,WAAW,MAAvB,iBAG/I,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,YAAnB,uJACsE,mBAAGA,WAAW,KAAQ,CACxF,KAAQ,iBAD0D,eADtE,KAIA,iBAAGA,WAAW,MAAd,+E,wMAORJ,EAAWK,gBAAiB","file":"component---docs-advanced-topics-plugins-md-9e54ab53ae06f1f9b3e1.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ephys/Documents/dev/reworkjs/reworkjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"customizing-the-framework\"\n    }}>{`Customizing the framework`}</h1>\n    <h2 {...{\n      \"id\": \"hook-system\"\n    }}>{`Hook System`}</h2>\n    <p>{`Hooks allow you to change the behavior of parts of the framework.`}</p>\n    <p>{`In order to enable hooks, you will want to provide the path to your hook files inside of your `}<a parentName=\"p\" {...{\n        \"href\": \"configuration.md#hooks\"\n      }}>{`configuration file`}</a>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hooks.client`}</inlineCode>{` will accept the hook the framework will run in the browser version of the application`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hooks.server`}</inlineCode>{` will accept the hook the framework will run during server-side rendering`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`Example:`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"hooks\": {\n    \"client\": \"./src/hooks/client\",\n    \"server\": \"./src/hooks/server\"\n  }\n}\n`}</code></pre>\n    <p>{`Paths are resolved relative to the configuration file.`}</p>\n    <p>{`Your hook files must respect two key points:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`They must have a default export`}</li>\n      <li parentName=\"ul\">{`The default export must be a class definition`}</li>\n    </ul>\n    <p>{`Using a hook is as simple as providing the correctly named method inside of your class definition.`}</p>\n    <p><em parentName=\"p\">{`Example`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Provider } from 'react-redux';\nimport createConfiguredStore from '../create-store';\n\nexport default class ClientSideHook {\n\n  constructor() {\n    this.store = createConfiguredStore();\n  }\n\n  wrapRootComponent(component) {\n\n    return (\n      // add a redux store Provider\n      <Provider store={this.store}>\n        {component}\n      </Provider>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`Which hooks you can use depend on whether you are server-side or client-side`}</p>\n    <h3 {...{\n      \"id\": \"common-hooks\"\n    }}>{`Common hooks`}</h3>\n    <p>{`These are hooks that are available on both client & server sides.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`wrapRootComponent(React.AbstractComponent): React.AbstractComponent`}</inlineCode>{`: use this hook to wrap the root component\nof the React tree. Useful if you need to add providers.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"client-side-hooks\"\n    }}>{`Client-side hooks`}</h3>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: A single instance of your hook will be created.`}</p>\n    <p>{`Currently the framework does not offer any client-side specific hook. `}<a parentName=\"p\" {...{\n        \"href\": \"#common-hooks\"\n      }}>{`Common hooks`}</a>{` are however available`}</p>\n    <h3 {...{\n      \"id\": \"server-side-hooks-ssr-only\"\n    }}>{`Server-side hooks (SSR only)`}</h3>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: A new instance of your hook is created for each request, you can therefore store state specific to one request.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`preRender(HtmlParts): HtmlParts`}</inlineCode>{`: this hook is called after React is done rendering\nand right before the page wrapper itself is being rendered. (If you have a better name for this, please open an issue!).`}</p>\n        <p parentName=\"li\">{`The point of this hook is `}<em parentName=\"p\">{`not`}</em>{` to change how the page is rendered,\nbut to add extra content to the page (scripts, meta tags, etc).`}</p>\n        <p parentName=\"li\">{`It receives and should return the following format:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-typescript\"\n          }}>{`interface Htmlparts {\n  /** what will be put inside of <head>. Eg. Webpack preload scripts & CSS */\n  header: string;\n\n  /** The HTML outputted by React, the contents of <div id=app /> */\n  body: string;\n\n  /** What will be placed at the very end of the page */\n  footer: string;\n\n  /** The output of Helmet.renderStatic. See https://github.com/nfl/react-helmet#server-usage */\n  helmet: Object;\n}\n`}</code></pre>\n        <p parentName=\"li\"><em parentName=\"p\">{`note`}</em>{`: This API is highly prone to changes to unify with Helmet.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`postRequest(): void`}</inlineCode>{`: This method is called after the server is done responding to the client with the generated page.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`static configureServerApp(app: ExpressInstance): void`}</inlineCode>{`: This method is called before the server is started. It enables you to\nadd new endpoints to the express instance.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"plugin-system\"\n    }}>{`Plugin system`}</h2>\n    <p>{`While Hooks are great for solving needs specific to your project, plugins enable you\nto provide generic solutions that are reusable across projects.`}</p>\n    <p>{`Plugins are a layer on top of hook.`}</p>\n    <h3 {...{\n      \"id\": \"enabling-a-plugin\"\n    }}>{`Enabling a plugin`}</h3>\n    <p>{`In order to enable a plugin, you need to specify the name of the plugin as a key in the `}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` object of\nyour `}<a parentName=\"p\" {...{\n        \"href\": \"configuration.md#plugins\"\n      }}>{`configuration file`}</a>{`. The value of that entry is the configuration of the plugin.`}</p>\n    <p><em parentName=\"p\">{`Example:`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"plugins\": {\n    \"@reworkjs/redux\": {\n      \"global-stores\": \"./app/stores\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The above example will cause the framework to load the `}<inlineCode parentName=\"p\">{`@reworkjs/redux/plugin.js`}</inlineCode>{` plugin definition.`}</p>\n    <h3 {...{\n      \"id\": \"plugin-definition-resolution\"\n    }}>{`Plugin definition resolution`}</h3>\n    <p>{`If the path to the plugin definition points to a folder, the framework will attempt to resolve `}<inlineCode parentName=\"p\">{`plugin.js`}</inlineCode>{` in that folder.`}</p>\n    <p>{`Alternatively, you can specify a file directly: `}<inlineCode parentName=\"p\">{`./plugins/my-custom-plugin.js`}</inlineCode>{`.`}</p>\n    <p>{`Paths are resolved relative to the configuration file.`}</p>\n    <h3 {...{\n      \"id\": \"creating-a-plugin-definition\"\n    }}>{`Creating a plugin definition`}</h3>\n    <p>{`A typical plugin definition looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nconst path = require('path');\n\nmodule.exports = class ReduxPlugin {\n\n  constructor(params) {\n    const config = params.pluginConfig;\n    const configDir = path.dirname(params.configFile);\n\n    this.globalStoresDir = config['global-stores'] ? path.resolve(configDir, config['global-stores']) : null;\n  }\n\n  getHooks() {\n\n    return {\n      client: path.resolve(\\`\\${__dirname}/../hook-client\\`),\n      server: path.resolve(\\`\\${__dirname}/../hook-server\\`),\n    };\n  }\n}\n`}</code></pre>\n    <p>{`Some key points:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Your file will not be automatically transpiled by the framework, it must be compatible with your Node version.`}</li>\n      <li parentName=\"ul\">{`The main/default export of your plugin must be a class`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Methods`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`constructor`}</inlineCode>{`: Your plugin will be constructed and will be passed the following parameters:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`params.configFile`}</inlineCode>{`: The location of the configFile in which your plugin was declared`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`params.pluginConfig`}</inlineCode>{`: The configuration of your plugin as specified in `}<inlineCode parentName=\"li\">{`configFile`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`getHooks`}</inlineCode>{`: This method allows your to provide the different hooks the framework\nwill include in the project, the format is the same as the one described in `}<a parentName=\"p\" {...{\n            \"href\": \"#hook-system\"\n          }}>{`Hook System`}</a>{`.`}</p>\n        <p parentName=\"li\">{`A notable difference is that the path to the hook file must be absolute.`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}