{"version":3,"sources":["webpack:///../docs/javascript-flavors/typescript.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,S,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,WADR,WAGA,2LAEE,yBAAgB,CACd,WAAc,KADhB,4BAFF,eAME,yBAAgB,CACd,WAAc,KADhB,mBANF,KAUA,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,OAFb,0MAeL,iBAAQ,CACN,GAAM,gBADR,gBAGA,+IAEE,yBAAgB,CACd,WAAc,KADhB,uDAFF,2CAOE,yBAAgB,CACd,WAAc,KADhB,uBAPF,KAWA,8EACA,uBAAK,mBAAU,CACX,UAAa,iBACb,WAAc,OAFb,mZA4BL,kJACA,qBAAG,yBAAgB,CACf,WAAc,KADf,wCAGH,iBAAQ,CACN,GAAM,oBADR,oBAGA,4LAEA,uBAAK,mBAAU,CACX,UAAa,sBACb,WAAc,OAFb,iRAiBL,6FACE,gBAAO,CACL,KAAQ,8CACR,WAAc,KAFhB,uBAIF,iBAAQ,CACN,GAAM,WADR,WAGA,iHAEE,yBAAgB,CACd,WAAc,KADhB,iBAFF,kD,qNAUJH,EAAWI,gBAAiB","file":"component---docs-javascript-flavors-typescript-md-627675481f05b25eff75.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/ephys/Development/reworkjs/core/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"typescript\"\n    }}>{`TypeScript`}</h1>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <p>{`rework.js treats TypeScript files like other files. While tsc won't be used, you can use the built-in babel integration\nto compile typescript files by adding the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`@babel/preset-typescript`}</inlineCode>\n      {` package to `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`babel.config.js`}</inlineCode>\n      {`.`}</p>\n    <pre><code {...{\n        \"className\": \"language-javascript\",\n        \"parentName\": \"pre\"\n      }}>{`// babel.config.js\n\nmodule.exports = {\n  presets: [\n    ['@reworkjs/core/babel-preset'],\n    ['@babel/preset-typescript', {\n      isTSX: true,\n      allExtensions: true,\n    }],\n  ],\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"typechecking\"\n    }}>{`Typechecking`}</h2>\n    <p>{`Babel will not check whether the typing is correct when building, but you can use tsc to typecheck\nwith this command: `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`tsc --noEmit --project tsconfig.json --skipLibCheck`}</inlineCode>\n      {`.\nYou will need to install TypeScript (`}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`npm i -D typescript`}</inlineCode>\n      {`)`}</p>\n    <p>{`You will also need to configure tsc through tsconfig:`}</p>\n    <pre><code {...{\n        \"className\": \"language-json5\",\n        \"parentName\": \"pre\"\n      }}>{`// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"es6\",\n    \"jsx\": \"react\",\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"rootDir\": \"src\",\n    \"noEmit\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"*\": [\n        \"node_modules/*\",\n        \"types/*\"\n      ]\n    }\n  },\n  \"include\": [\n    \"src/**/*\"\n  ]\n}\n`}</code></pre>\n    <p>{`rework.js uses a number of libraries with which you will interact. Please install their typing to avoid any typing error:`}</p>\n    <p><inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`npm i -D @types/loadable__component`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"css-typechecking\"\n    }}>{`CSS TypeChecking`}</h3>\n    <p>{`Because we import css files as if it were JavaScript, we need to tell TypeScript how to interpret it.\nSimply adding the following file in your project will do it:`}</p>\n    <pre><code {...{\n        \"className\": \"language-typescript\",\n        \"parentName\": \"pre\"\n      }}>{`// style.d.ts\n\n// css & css modules\ndeclare module '*.css' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n\n// scss & scss modules\ndeclare module '*.scss' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n`}</code></pre>\n    <p>{`Alternatively tools exist to generate these typings for you, such as `}\n      <a {...{\n        \"href\": \"https://github.com/skovy/typed-scss-modules\",\n        \"parentName\": \"p\"\n      }}>{`typed-scss-modules`}</a></p>\n    <h2 {...{\n      \"id\": \"linting\"\n    }}>{`Linting`}</h2>\n    <p>{`You will need to adapt your eslint config to support typescript.\nDon't forget to update `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`.lintstagedrc`}</inlineCode>\n      {` to lint typescript files during commit.`}</p>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}