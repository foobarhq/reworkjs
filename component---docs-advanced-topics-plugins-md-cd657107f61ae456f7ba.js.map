{"version":3,"sources":["webpack:///../docs/advanced-topics/plugins.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"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","file":"component---docs-advanced-topics-plugins-md-cd657107f61ae456f7ba.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/ephys/Development/reworkjs/core/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"customizing-the-framework\"\n    }}>{`Customizing the framework`}</h1>\n    <h2 {...{\n      \"id\": \"hook-system\"\n    }}>{`Hook System`}</h2>\n    <p>{`Hooks allow you to change the behavior of parts of the framework.`}</p>\n    <p>{`In order to enable hooks, you will want to provide the path to your hook files inside of your `}\n      <a {...{\n        \"href\": \"configuration.md#hooks\",\n        \"parentName\": \"p\"\n      }}>{`configuration file`}</a>\n      {`.`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`hooks.client`}</inlineCode>\n        {` will accept the hook the framework will run in the browser version of the application`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`hooks.server`}</inlineCode>\n        {` will accept the hook the framework will run during server-side rendering`}</li>\n\n    </ul>\n    <p><em {...{\n        \"parentName\": \"p\"\n      }}>{`Example:`}</em></p>\n    <pre><code {...{\n        \"className\": \"language-json\",\n        \"parentName\": \"pre\"\n      }}>{`{\n  \"hooks\": {\n    \"client\": \"./src/hooks/client\",\n    \"server\": \"./src/hooks/server\"\n  }\n}\n`}</code></pre>\n    <p>{`Paths are resolved relative to the configuration file.`}</p>\n    <p>{`Your hook files must respect two key points:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`They must have a default export`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`The default export must be a class definition`}</li>\n\n    </ul>\n    <p>{`Using a hook is as simple as providing the correctly named method inside of your class definition.`}</p>\n    <p><em {...{\n        \"parentName\": \"p\"\n      }}>{`Example`}</em>\n      {`:`}</p>\n    <pre><code {...{\n        \"className\": \"language-javascript\",\n        \"parentName\": \"pre\"\n      }}>{`import { Provider } from 'react-redux';\nimport createConfiguredStore from '../create-store';\n\nexport default class ClientSideHook {\n\n  constructor() {\n    this.store = createConfiguredStore();\n  }\n\n  wrapRootComponent(component) {\n\n    return (\n      // add a redux store Provider\n      <Provider store={this.store}>\n        {component}\n      </Provider>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`Which hooks you can use depend on whether you are server-side or client-side`}</p>\n    <h3 {...{\n      \"id\": \"common-hooks\"\n    }}>{`Common hooks`}</h3>\n    <p>{`These are hooks that are available on both client & server sides.`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`wrapRootComponent(React.AbstractComponent): React.AbstractComponent`}</inlineCode>\n        {`: use this hook to wrap the root component\nof the React tree. Useful if you need to add providers.`}</li>\n\n    </ul>\n    <h3 {...{\n      \"id\": \"client-side-hooks\"\n    }}>{`Client-side hooks`}</h3>\n    <p><strong {...{\n        \"parentName\": \"p\"\n      }}>{`Note`}</strong>\n      {`: A single instance of your hook will be created.`}</p>\n    <p>{`Currently the framework does not offer any client-side specific hook. `}\n      <a {...{\n        \"href\": \"#common-hooks\",\n        \"parentName\": \"p\"\n      }}>{`Common hooks`}</a>\n      {` are however available`}</p>\n    <h3 {...{\n      \"id\": \"server-side-hooks-ssr-only\"\n    }}>{`Server-side hooks (SSR only)`}</h3>\n    <p><strong {...{\n        \"parentName\": \"p\"\n      }}>{`Note`}</strong>\n      {`: A new instance of your hook is created for each request, you can therefore store state specific to one request.`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}><inlineCode {...{\n            \"parentName\": \"p\"\n          }}>{`preRender(HtmlParts): HtmlParts`}</inlineCode>\n          {`: this hook is called after React is done rendering\nand right before the page wrapper itself is being rendered. (If you have a better name for this, please open an issue!).`}</p>\n\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`The point of this hook is `}\n          <em {...{\n            \"parentName\": \"p\"\n          }}>{`not`}</em>\n          {` to change how the page is rendered,\nbut to add extra content to the page (scripts, meta tags, etc).`}</p>\n\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`It receives and should return the following format:`}</p>\n\n\n        <pre {...{\n          \"parentName\": \"li\"\n        }}><code {...{\n            \"className\": \"language-typescript\",\n            \"parentName\": \"pre\"\n          }}>{`interface Htmlparts {\n  /** what will be put inside of <head>. Eg. Webpack preload scripts & CSS */\n  header: string;\n\n  /** The HTML outputted by React, the contents of <div id=app /> */\n  body: string;\n\n  /** What will be placed at the very end of the page */\n  footer: string;\n\n  /** The output of Helmet.renderStatic. See https://github.com/nfl/react-helmet#server-usage */\n  helmet: Object;\n}\n`}</code></pre>\n\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}><em {...{\n            \"parentName\": \"p\"\n          }}>{`note`}</em>\n          {`: This API is highly prone to changes to unify with Helmet.`}</p>\n\n      </li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}><inlineCode {...{\n            \"parentName\": \"p\"\n          }}>{`postRequest(): void`}</inlineCode>\n          {`: This method is called after the server is done responding to the client with the generated page.`}</p>\n\n      </li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}><inlineCode {...{\n            \"parentName\": \"p\"\n          }}>{`static configureServerApp(app: ExpressInstance): void`}</inlineCode>\n          {`: This method is called before the server is started. It enables you to\nadd new endpoints to the express instance.`}</p>\n\n      </li>\n\n    </ul>\n    <h2 {...{\n      \"id\": \"plugin-system\"\n    }}>{`Plugin system`}</h2>\n    <p>{`While Hooks are great for solving needs specific to your project, plugins enable you\nto provide generic solutions that are reusable across projects.`}</p>\n    <p>{`Plugins are a layer on top of hook.`}</p>\n    <h3 {...{\n      \"id\": \"enabling-a-plugin\"\n    }}>{`Enabling a plugin`}</h3>\n    <p>{`In order to enable a plugin, you need to specify the name of the plugin as a key in the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`plugins`}</inlineCode>\n      {` object of\nyour `}\n      <a {...{\n        \"href\": \"configuration.md#plugins\",\n        \"parentName\": \"p\"\n      }}>{`configuration file`}</a>\n      {`. The value of that entry is the configuration of the plugin.`}</p>\n    <p><em {...{\n        \"parentName\": \"p\"\n      }}>{`Example:`}</em></p>\n    <pre><code {...{\n        \"className\": \"language-json\",\n        \"parentName\": \"pre\"\n      }}>{`{\n  \"plugins\": {\n    \"@reworkjs/redux\": {\n      \"global-stores\": \"./app/stores\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The above example will cause the framework to load the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`@reworkjs/redux/plugin.js`}</inlineCode>\n      {` plugin definition.`}</p>\n    <h3 {...{\n      \"id\": \"plugin-definition-resolution\"\n    }}>{`Plugin definition resolution`}</h3>\n    <p>{`If the path to the plugin definition points to a folder, the framework will attempt to resolve `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`plugin.js`}</inlineCode>\n      {` in that folder.`}</p>\n    <p>{`Alternatively, you can specify a file directly: `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`./plugins/my-custom-plugin.js`}</inlineCode>\n      {`.`}</p>\n    <p>{`Paths are resolved relative to the configuration file.`}</p>\n    <h3 {...{\n      \"id\": \"creating-a-plugin-definition\"\n    }}>{`Creating a plugin definition`}</h3>\n    <p>{`A typical plugin definition looks like this:`}</p>\n    <pre><code {...{\n        \"className\": \"language-javascript\",\n        \"parentName\": \"pre\"\n      }}>{`'use strict';\n\nconst path = require('path');\n\nmodule.exports = class ReduxPlugin {\n\n  constructor(params) {\n    const config = params.pluginConfig;\n    const configDir = path.dirname(params.configFile);\n\n    this.globalStoresDir = config['global-stores'] ? path.resolve(configDir, config['global-stores']) : null;\n  }\n\n  getHooks() {\n\n    return {\n      client: path.resolve(\\`\\${__dirname}/../hook-client\\`),\n      server: path.resolve(\\`\\${__dirname}/../hook-server\\`),\n    };\n  }\n}\n`}</code></pre>\n    <p>{`Some key points:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Your file will not be automatically transpiled by the framework, it must be compatible with your Node version.`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`The main/default export of your plugin must be a class`}</li>\n\n    </ul>\n    <p><strong {...{\n        \"parentName\": \"p\"\n      }}>{`Methods`}</strong>\n      {`:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}><inlineCode {...{\n            \"parentName\": \"p\"\n          }}>{`constructor`}</inlineCode>\n          {`: Your plugin will be constructed and will be passed the following parameters:`}</p>\n\n\n        <ul {...{\n          \"parentName\": \"li\"\n        }}>\n\n          <li {...{\n            \"parentName\": \"ul\"\n          }}><inlineCode {...{\n              \"parentName\": \"li\"\n            }}>{`params.configFile`}</inlineCode>\n            {`: The location of the configFile in which your plugin was declared`}</li>\n\n\n          <li {...{\n            \"parentName\": \"ul\"\n          }}><inlineCode {...{\n              \"parentName\": \"li\"\n            }}>{`params.pluginConfig`}</inlineCode>\n            {`: The configuration of your plugin as specified in `}\n            <inlineCode {...{\n              \"parentName\": \"li\"\n            }}>{`configFile`}</inlineCode></li>\n\n        </ul>\n\n      </li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}><inlineCode {...{\n            \"parentName\": \"p\"\n          }}>{`getHooks`}</inlineCode>\n          {`: This method allows your to provide the different hooks the framework\nwill include in the project, the format is the same as the one described in `}\n          <a {...{\n            \"href\": \"#hook-system\",\n            \"parentName\": \"p\"\n          }}>{`Hook System`}</a>\n          {`.`}</p>\n\n\n        <p {...{\n          \"parentName\": \"li\"\n        }}>{`A notable difference is that the path to the hook file must be absolute.`}</p>\n\n      </li>\n\n    </ul>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}