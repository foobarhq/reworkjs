{"version":3,"sources":["webpack:///../docs/4-public-resources.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,4GACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,yHAAwG,0BAAYC,WAAW,KAAvB,UAAxG,yHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,kIAYL,0FACA,sBACE,kBAAIA,WAAW,MAAf,8CACA,kBAAIA,WAAW,MAAf,yGAEF,yMAEA,iBAAQ,CACN,GAAM,oBADR,oBAGA,iDAAgC,mBAAGA,WAAW,KAAQ,CAClD,KAAQ,gEACP,0BAAYA,WAAW,KAAvB,cAFL,sEAEqI,kBAAIA,WAAW,MAFpJ,mGAIA,yCAAwB,0BAAYA,WAAW,KAAvB,gBAAxB,oCACA,6HAA4G,kBAAIA,WAAW,MAA3H,6CACuC,0BAAYA,WAAW,KAAvB,iCADvC,oCACqJ,0BAAYA,WAAW,KAAvB,iBACrJ,mFAAkE,0BAAYA,WAAW,KAAvB,aAAlE,8EACwB,0BAAYA,WAAW,KAAvB,gBADxB,KACsF,0BAAYA,WAAW,KAAvB,iBADtF,KAEA,0EAAyD,0BAAYA,WAAW,KAAvB,aAAzD,0CAAyJ,0BAAYA,WAAW,KAAvB,UAAzJ,gIAC2G,0BAAYA,WAAW,KAAvB,UAD3G,KACmK,0BAAYA,WAAW,KAAvB,SADnK,e,mMAMJJ,EAAWK,gBAAiB","file":"component---docs-4-public-resources-md-497c01cc64799104b8c5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/ephys/Development/reworkjs/core/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"public-resources\"\n    }}>{`Public Resources`}</h1>\n    <p>{`There are two way to access resources with rework.js: statically or through webpack`}</p>\n    <h2 {...{\n      \"id\": \"webpack-resources\"\n    }}>{`Webpack resources`}</h2>\n    <p>{`This is the \"standard\" way to import resources in rework.js. You do this by using the JavaScript `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` statement. The url of the resource will be returned (note: that won't download the resource, only give you the url).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`// my-comp.tsx\n\nimport logoUrl from './logo.svg';\n\nexport default function Logo() {\n  return <img src={logoUrl} />;\n}\n`}</code></pre>\n    <p>{`Resources imported this way have some processing applied to them:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`They will usually be optimised if possible`}</li>\n      <li parentName=\"ul\">{`Their URL can change between two builds because a hash will be added to their URL for cache-busting.`}</li>\n    </ul>\n    <p>{`This system will not always meet your needs. If you need webpack to back-off and let you have full control over your resource,\nyou'll want to use Static Resources (see below).`}</p>\n    <h2 {...{\n      \"id\": \"static-resources\"\n    }}>{`Static resources`}</h2>\n    <p>{`Resources located in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.reworkjs.com/configuration#directoriesresources\"\n      }}><inlineCode parentName=\"a\">{`resources`}</inlineCode></a>{` directory will be copied as-is at the root of the build directory.`}<br parentName=\"p\"></br>{`\n`}{`These resources are not processed by webpack, no modification of any kind is done to them.`}</p>\n    <p>{`The directory is `}<inlineCode parentName=\"p\">{`./src/public`}</inlineCode>{` by default but is configurable.`}</p>\n    <p>{`In order to access the resource, you can't import its url. Instead, you reference it by URL directly.`}<br parentName=\"p\"></br>{`\n`}{`E.g.: if your resource is located in `}<inlineCode parentName=\"p\">{`<resource_folder>/favicon.ico`}</inlineCode>{`, your icon will be available as `}<inlineCode parentName=\"p\">{`/favicon.ico`}</inlineCode></p>\n    <p>{`symlinks will be followed when copying the contents of the `}<inlineCode parentName=\"p\">{`resources`}</inlineCode>{` folder, allowing you to reference files stored\nin vendor folders such as `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`bower_modules`}</inlineCode>{`.`}</p>\n    <p>{`N.B.: You should avoid importing files located in `}<inlineCode parentName=\"p\">{`resources`}</inlineCode>{` using Webpack mechanisms (such as the `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` statement) as\nthat will cause the resource to be bundled twice. Instead, load that resource using browser loading systems (`}<inlineCode parentName=\"p\">{`<link>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{`, etc...).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}