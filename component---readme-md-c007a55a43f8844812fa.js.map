{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,2LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,aAGA,qBAAG,kBAAIC,WAAW,KAAf,gCACH,kJACA,8JACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,6BAApB,iMACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,aAApB,gFACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,kVACwI,0BAAYA,WAAW,MAAvB,YADxI,qBACmN,0BAAYA,WAAW,MAAvB,2BADnN,YAEA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,aAApB,kFAEF,iBAAQ,CACN,GAAM,iBADR,iBAGA,sBACE,kBAAIA,WAAW,MAAf,YAAiC,mBAAGA,WAAW,MAAS,CACpD,KAAQ,sCADqB,SAAjC,KAEwB,mBAAGA,WAAW,MAAS,CAC3C,KAAQ,0BADY,SAFxB,KAIwB,mBAAGA,WAAW,MAAS,CAC3C,KAAQ,6CADY,cAJxB,WAOA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gCADQ,+BAApB,SAEkD,mBAAGA,WAAW,MAAS,CACrE,KAAQ,wCADsC,cAFlD,KAKA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yCADQ,gBAApB,4CAGA,kBAAIA,WAAW,MAAf,kBACA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6CADQ,0BAGpB,kBAAIA,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,wBACA,kBAAIA,WAAW,MAAf,8BACA,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,qCACA,kBAAIA,WAAW,MAAf,kDACA,kBAAIA,WAAW,MAAf,kC,kLAMNJ,EAAWK,gBAAiB","file":"component---readme-md-c007a55a43f8844812fa.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ephys/Documents/dev/reworkjs/reworkjs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"reworkjs\"\n    }}>{`rework.js`}</h1>\n    <p><em parentName=\"p\">{`Opinionated React Framework`}</em></p>\n    <p>{`ReworkJs (rjs) is an opinionated Framework designed for Progressive Web Apps and based on the familiar React-Redux stack.`}</p>\n    <p>{`The main motivation for this project is to separate the boilerplate from the project code. Configure the boilerplate, don't write it.`}</p>\n    <h2 {...{\n      \"id\": \"objectives\"\n    }}>{`Objectives`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Minimise boilerplate code`}</strong>{`: Boilerplate code is difficult to update when you have multiple projects, you need to copy-paste a lot. Most people won't do it and lose out on new awesome features as the tech progresses.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Optimized`}</strong>{`: In production, the app should run as fast as it can. Even on slow devices.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Modular`}</strong>{` (Planned): The code should not be split by type of technology but by features. We want features to be contained in their own folder without having to manage complex relationships everywhere.\\\\\nExample: A view should be able to define its route, and what resources it needs whitelisted without having to manually manage a huge global `}<inlineCode parentName=\"li\">{`route.js`}</inlineCode>{` file or a global `}<inlineCode parentName=\"li\">{`Content-Security-Policy`}</inlineCode>{` header.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Universal`}</strong>{`: Your app should be able to be server-side rendered, or run as a standalone.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"main-features\"\n    }}>{`Main Features`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Uses the `}<a parentName=\"li\" {...{\n          \"href\": \"https://facebook.github.io/react/\"\n        }}>{`React`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://redux.js.org/\"\n        }}>{`Redux`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://redux-saga.github.io/redux-saga/\"\n        }}>{`Redux-Saga`}</a>{` stack.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./docs/locale-management.md\"\n        }}>{`Automatic Locale Management`}</a>{` (via `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/yahoo/react-intl\"\n        }}>{`React-Intl`}</a>{`)`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./docs/state-management/providers.md\"\n        }}>{`Abstractions`}</a>{` aimed at reducing the redux boilerplate`}</li>\n      <li parentName=\"ul\">{`Service Worker`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./docs/launching-the-app.md#prerendering\"\n        }}>{`Server-side rendering`}</a></li>\n      <li parentName=\"ul\">{`Lazy route loading`}</li>\n      <li parentName=\"ul\">{`Hot Module Reloading`}</li>\n      <li parentName=\"ul\">{`ESLint & StyleLint support`}</li>\n      <li parentName=\"ul\">{`DLL support`}</li>\n      <li parentName=\"ul\">{`Preconfigured with ESNext support`}</li>\n      <li parentName=\"ul\">{`Preconfigured with both SCSS & PostCSS support`}</li>\n      <li parentName=\"ul\">{`Brotli / GZip precompression`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}