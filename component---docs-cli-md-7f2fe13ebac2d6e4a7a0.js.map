{"version":3,"sources":["webpack:///../docs/cli.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,6LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8BADR,8BAGA,mJAEA,wFAAuE,mBAAGC,WAAW,KAAQ,CACzF,KAAQ,oCAD2D,iBAAvE,yCAIA,iBAAQ,CACN,GAAM,8BADR,8BAGA,yCACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAApB,6EACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,yBAApB,mDAA0I,0BAAYA,WAAW,MAAvB,QAA1I,MAEF,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,aACH,mNAGA,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,cACH,6DACA,sEAAqD,0BAAYA,WAAW,KAAvB,YAArD,uBAAiI,0BAAYA,WAAW,KAAvB,gBACjI,iCACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,0FACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,iBAAwF,0BAAYA,WAAW,MAAvB,aAAxF,8EAA6N,0BAAYA,WAAW,MAAvB,SAA7N,qCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,sRAIF,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,cACH,gDACA,+BAAc,0BAAYA,WAAW,KAAvB,kCAAd,MACA,iCACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,4JAEF,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,qBACH,yF,oLAKJJ,EAAWK,gBAAiB","file":"component---docs-cli-md-7f2fe13ebac2d6e4a7a0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/ephys/Development/reworkjs/core/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rjs-command-line-interface\"\n    }}>{`RJS Command Line Interface`}</h1>\n    <p>{`ReworkJS comes bundled with a command line interface which handles tasks such as\nlaunching, building or testing your app.`}</p>\n    <p>{`It only comes installed locally by default. But you can install `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reworkjs/cli\"\n      }}>{`@reworkjs/cli`}</a>{`\nto gain access to it from anywhere.`}</p>\n    <h2 {...{\n      \"id\": \"list-of-available-commands\"\n    }}>{`List of available commands`}</h2>\n    <p>{`General options:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--env <NODE_ENV>`}</inlineCode>{`: Sets the NODE_ENV environment variable for the lifetime of the process.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--verbose <verbosity>`}</inlineCode>{`: Sets the verbosity of the output. Defaults to `}<inlineCode parentName=\"li\">{`info`}</inlineCode>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"rjs-init\"\n    }}><inlineCode parentName=\"h3\">{`rjs init`}</inlineCode></h3>\n    <p>{`Installs and initializes the reworkjs framework.\nYou can launch it again as many times as you wish to configure new elements that might have\nbeen added after your initial installation.`}</p>\n    <h3 {...{\n      \"id\": \"rjs-start\"\n    }}><inlineCode parentName=\"h3\">{`rjs start`}</inlineCode></h3>\n    <p>{`Builds and launches the application.`}</p>\n    <p>{`The compiler will launch in watch mode if the `}<inlineCode parentName=\"p\">{`NODE_ENV`}</inlineCode>{` variable is set to `}<inlineCode parentName=\"p\">{`development`}</inlineCode></p>\n    <p>{`Options:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--port`}</inlineCode>{`: The port on which the static and pre-rendering server will respond to HTTP requests.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--ssr`}</inlineCode>{`: By default, `}<inlineCode parentName=\"li\">{`rjs start`}</inlineCode>{` will launch without Server-Side Rendering to reduce compilation time. Use `}<inlineCode parentName=\"li\">{`--ssr`}</inlineCode>{` to enable Server Side Rendering.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--no-split`}</inlineCode>{`: By default, starting the app with pre-rendering will create a split view in the terminal with the output of\nthe pre-rendering server builder, the client bundle builder, and the pre-rendering server itself. You can revert back\nto a regular CLI display using this option.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"rjs-build\"\n    }}><inlineCode parentName=\"h3\">{`rjs build`}</inlineCode></h3>\n    <p>{`Builds the application.`}</p>\n    <p>{`Usage: `}<inlineCode parentName=\"p\">{`rjs build <...parts> [options]`}</inlineCode>{`  `}</p>\n    <p>{`Options:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`parts`}</inlineCode>{`: Which parts of the application to build. Either \"server\" for the pre-rendering server, \"client\" for the browser bundle, or both separated by a space.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"rjs-print-config\"\n    }}><inlineCode parentName=\"h3\">{`rjs print-config`}</inlineCode></h3>\n    <p>{`Dumps the computed framework configuration. For debug purposes.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}