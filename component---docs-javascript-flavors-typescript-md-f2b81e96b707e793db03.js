(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"1n83":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var s=n("SAVP"),r=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/javascript-flavors/typescript.md"}});var o={_frontmatter:c},a=r.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(s.b)(a,i({},o,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"typescript"},"TypeScript"),Object(s.b)("h2",{id:"install"},"Install"),Object(s.b)("p",null,"rework.js treats TypeScript files like other files. While tsc won't be used, you can use the built-in babel integration\nto compile typescript files by adding the ",Object(s.b)("inlineCode",{parentName:"p"},"@babel/preset-typescript")," package to ",Object(s.b)("inlineCode",{parentName:"p"},"babel.config.js"),"."),Object(s.b)("pre",null,Object(s.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"// babel.config.js\n\nmodule.exports = {\n  presets: [\n    ['@reworkjs/core/babel-preset'],\n    ['@babel/preset-typescript', {\n      isTSX: true,\n      allExtensions: true,\n    }],\n  ],\n};\n")),Object(s.b)("h2",{id:"typechecking"},"Typechecking"),Object(s.b)("p",null,"Babel will not check whether the typing is correct when building, but you can use tsc to typecheck\nwith this command: ",Object(s.b)("inlineCode",{parentName:"p"},"tsc --noEmit --project tsconfig.json --skipLibCheck"),".",Object(s.b)("br",{parentName:"p"}),"\n","You will need to install TypeScript (",Object(s.b)("inlineCode",{parentName:"p"},"npm i -D typescript"),")"),Object(s.b)("p",null,"You will also need to configure tsc through tsconfig:"),Object(s.b)("pre",null,Object(s.b)("code",i({parentName:"pre"},{className:"language-json5"}),'// tsconfig.json\n\n{\n  "compilerOptions": {\n    "module": "commonjs",\n    "target": "es6",\n    "jsx": "react",\n    "strict": true,\n    "moduleResolution": "node",\n    "sourceMap": true,\n    "rootDir": "src",\n    "noEmit": true,\n    "baseUrl": ".",\n    "paths": {\n      "*": [\n        "node_modules/*",\n        "types/*"\n      ]\n    }\n  },\n  "include": [\n    "src/**/*"\n  ]\n}\n')),Object(s.b)("p",null,"rework.js uses a number of libraries with which you will interact. Please install their typing to avoid any typing error:"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"npm i -D @types/loadable__component")),Object(s.b)("h3",{id:"css-typechecking"},"CSS TypeChecking"),Object(s.b)("p",null,"Because we import css files as if it were JavaScript, we need to tell TypeScript how to interpret it.\nSimply adding the following file in your project will do it:"),Object(s.b)("pre",null,Object(s.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"// style.d.ts \n\n// css & css modules\ndeclare module '*.css' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n\n// scss & scss modules\ndeclare module '*.scss' {\n  const classes: { [key: string]: string };\n  export default classes;\n}\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/javascript-flavors/typescript.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-javascript-flavors-typescript-md-f2b81e96b707e793db03.js.map