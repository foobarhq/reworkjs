{"version":3,"sources":["webpack:///../docs/6-page-head.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,qMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,oBADR,oBAGA,gEAA+C,6BAAGC,WAAW,KAAQ,CACjE,KAAQ,kDACP,0BAAYA,WAAW,KAAvB,uBAFL,2DAIA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,MACd,KAAO,IAHN,wTAqBL,0FAAyE,6BAAGA,WAAW,KAAQ,CAC3F,KAAQ,sCAD6D,uBAGzE,iBAAQ,CACN,GAAM,mBADR,mBAGA,gIACA,sNAC2E,0BAAYA,WAAW,KAAvB,cAD3E,UAEA,qBAAG,kBAAIA,WAAW,KAAf,QAAH,kBAAsD,0BAAYA,WAAW,KAAvB,cAAtD,sFACA,qBAAG,kBAAIA,WAAW,KAAf,SAAH,KACA,+FACA,gEAA+C,6BAAGA,WAAW,KAAQ,CACjE,KAAQ,uDADmC,oCAA/C,KAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,kEAOL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,urC,mMA4CTJ,EAAWK,gBAAiB","file":"component---docs-6-page-head-md-8590c1e7265d49e0a5c0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/ephys/Development/reworkjs/core/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"page-metadata\"\n    }}>{`Page Metadata`}</h1>\n    <h2 {...{\n      \"id\": \"runtime-metadata\"\n    }}>{`Runtime metadata`}</h2>\n    <p>{`Setting the page metadata is handled by `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/staylor/react-helmet-async\"\n      }}><inlineCode parentName=\"a\">{`react-helmet-async`}</inlineCode></a>{`.\nThere is no need to setup it, simply start using it!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`// pages/home/home.view.tsx\n\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function HomeView() {\n  return (\n    <>\n      <Helmet>\n        <title>HomePage | MyCoolSite</title>\n      </Helmet>\n\n      <p>Welcome to my cool site</p>\n    </>\n  );\n}\n`}</code></pre>\n    <p>{`We recommend you place the default Helmet configuration inside of `}<a parentName=\"p\" {...{\n        \"href\": \"advanced-topics/root-component.md\"\n      }}>{`the Root component`}</a></p>\n    <h2 {...{\n      \"id\": \"static-metadata\"\n    }}>{`Static metadata`}</h2>\n    <p>{`Sometimes, you need to send metadata even if JavaScript is disabled, or before any JavaScript executes.`}</p>\n    <p>{`If you use Server-Side-Rendering, the HTML sent by the server will contain all the metadata provided by Helmet.\nIf you don't use SSR, you can still send some metadata by modifying the base `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` file.`}</p>\n    <p><em parentName=\"p\">{`Note`}</em>{`: Without SSR, `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` is built only once and used for all pages. With SSR, it is rebuilt for each page.`}</p>\n    <p><em parentName=\"p\">{`Setup`}</em>{`:`}</p>\n    <p>{`In the following example, we're adding Google Tag Manager on all pages`}</p>\n    <p>{`First you need to tell the framework to `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.reworkjs.com/configuration#render-html\"\n      }}>{`use a custom html file generator`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json5\"\n      }}>{`// .reworkrc\n{\n  \"render-html\": \"./src/render-html.js\"\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// src/render-html.js\n\n// note: this file is loaded by the builder itself, it needs to be valid JavaScript for your current version of Node.\n// \"data\" contains the metadata generated by helmet & the framework\nmodule.exports = function renderHtml(data) {\n\n  return \\`\n<!DOCTYPE html>\n<html \\${data.htmlAttributes}>\n<head>\n  \\${data.head}\n\n  <!-- Google Tag Manager -->\n  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n  })(window,document,'script','dataLayer','xxx');</script>\n  <!-- End Google Tag Manager -->\n</head>\n<body \\${data.bodyAttributes}>\n  <!-- Google Tag Manager (noscript) -->\n  <noscript>\n    <iframe\n      src=\"https://www.googletagmanager.com/ns.html?id=xxx\"\n      height=\"0\"\n      width=\"0\"\n      style=\"display:none;visibility:hidden\"\n    ></iframe>\n  </noscript>\n  <!-- End Google Tag Manager (noscript) -->\n\n  \\${data.body}\n</body>\n</html>\n  \\`;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}